<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE syntax SYSTEM "syntax.dtd">
<syntax>
	<head>
		<name>Rust</name>
		<charsintokens><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@.]]></charsintokens>
		<folding toplevel="2" />
	</head>
	<states>
		<default id="Base" font-style="normal" scope="meta.default">
			<keywords id="Operators" useforautocomplete="no" scope="language.operator" highlightInOrder="yes">
				<regex>([\^\+\-\*\/\=\!\&lt;\&gt;\%&amp;]|\|\||\|)</regex>
			</keywords>
			<keywords id="Keywords" useforautocomplete="yes" scope="keyword.control">
				<string>as</string>
				<string>break</string>
				<string>const</string>
				<string>continue</string>
				<string>crate</string>
				<string>dyn</string>
				<string>else</string>
				<string>enum</string>
				<string>extern</string>
				<string>false</string>
				<string>fn</string>
				<string>for</string>
				<string>if</string>
				<string>impl</string>
				<string>in</string>
				<string>let</string>
				<string>loop</string>
				<string>match</string>
				<string>mod</string>
				<string>move</string>
				<string>mut</string>
				<string>pub</string>
				<string>ref</string>
				<string>return</string>
				<string>Self</string>
				<string>self</string>
				<string>static</string>
				<string>struct</string>
				<string>super</string>
				<string>trait</string>
				<string>true</string>
				<string>type</string>
				<string>unsafe</string>
				<string>use</string>
				<string>where</string>
				<string>while</string>
				<string>abstract</string>
				<string>async</string>
				<string>await</string>
				<string>become</string>
				<string>box</string>
				<string>do</string>
				<string>final</string>
				<string>macro</string>
				<string>override</string>
				<string>priv</string>
				<string>try</string>
				<string>typeof</string>
				<string>unsized</string>
				<string>virtual</string>
				<string>yield</string>
			</keywords>
			<keywords id="TypeKeywords" useforautocomplete="yes" scope="keyword.type">
				<string>bool</string>
				<string>i8</string>
				<string>i16</string>
				<string>i32</string>
				<string>i64</string>
				<string>i128</string>
				<string>isize</string>
				<string>u8</string>
				<string>u16</string>
				<string>u32</string>
				<string>u64</string>
				<string>u128</string>
				<string>usize</string>
				<string>f32</string>
				<string>f64</string>
				<string>char</string>
				<string>str</string>
				<string>tup</string>
				<string>array</string>
				<string>Box</string>
				<string>Vec</string>
				<string>String</string>
			</keywords>
			<keywords id="Numbers" useforautocomplete="no" scope="constant.numeric">
				<regex>(?&lt;![\w\d_])((?:[+-]?(?:(?:[0-9]+\.[0-9]*)|(?:\.[0-9]+))(?:[eE][+\-]?[0-9]+)?[fFlL]?)|(?:(?:(?:[1-9][0-9]*)|0[0-7]*|(?:0[xX][0-9a-fA-F]+))(?:(?:[uU][lL]?)|(?:[lL][uU]?))?))(?![\w\d_])</regex>
			</keywords>
			<keywords id="FunctionRegex" useforautocomplete="no" scope="language.function">
				<regex>([A-Za-z0-9_]+ *)\(</regex>
			</keywords>
			<keywords id="Preprocessor" useforautocomplete="no" scope="keyword">
				<regex>(^[ 	]*import([^\n\r])*)</regex>
				<regex>(^[ 	]*package([^\n\r])*)</regex>
			</keywords>
			<state id="Characters" scope="constant.numeric.character">
				<begin><regex>'(?=(?:\\u[A-Fa-f0-9]{4}'|\\?.'))</regex></begin>
				<end><regex>(\\u[A-Fa-f0-9]{4}')|(\\'')|(.')</regex></end>
			</state>
			<state id="Single Comment" scope="comment">
				<begin>
					<regex>\/\/</regex>
				</begin>
				<end>
					<regex>[\n\r]</regex>
				</end>
			</state>
			<state id="Block Comment" type="comment" foldable="yes" scope="comment">
				<begin>
					<regex>/\*</regex>
				</begin>
				<end>
					<regex>\*/</regex>
				</end>
			</state>
			<state id="Strings" type="string" scope="string.double">
				<begin><regex>"</regex></begin>
				<end><regex>(?&lt;!\\)(\\\\)*"</regex></end>
			</state>
			<state id="Block" foldable="yes" scope="meta.block">
				<begin><regex>{</regex><autoend>}</autoend></begin>
				<end><regex>}</regex></end>
				<import />
			</state>
		</default>
	</states>
</syntax>
